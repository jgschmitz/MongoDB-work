{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f3ea3dc9",
   "metadata": {},
   "source": [
    "# Finding the most similar Player\n",
    "\n",
    "**Goal:**\n",
    "\n",
    " The goal is to find similar players based on their movements over time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dbd49d9f",
   "metadata": {},
   "source": [
    "### Library Installation and  Importation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a9acb42b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: fastdtw in ./.venv_11/lib/python3.11/site-packages (0.3.4)\n",
      "Requirement already satisfied: numpy in ./.venv_11/lib/python3.11/site-packages (from fastdtw) (1.26.2)\n",
      "\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m23.3.2\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m24.0\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install fastdtw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dbb1c01e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from collections import OrderedDict\n",
    "import tqdm\n",
    "from fastdtw import fastdtw\n",
    "from superduperdb import superduper\n",
    "from superduperdb.backends.mongodb import Collection\n",
    "from superduperdb.components.model import Model\n",
    "from superduperdb.components.listener import Listener\n",
    "from superduperdb.ext.numpy import array\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af495a21-54f3-49c4-8994-07fb8839c8a5",
   "metadata": {},
   "source": [
    "## Connect with the  database and create a collection."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d7f9504c-a739-4edc-a0e4-4f97a0de8fc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:12:50.40\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.build\u001b[0m:\u001b[36m65  \u001b[0m | \u001b[1mData Client is ready. MongoClient(host=['demo-shard-02-01.akkzw.mongodb.net:27016', 'demo-shard-01-02.akkzw.mongodb.net:27016', 'demo-shard-01-01.akkzw.mongodb.net:27016', 'demo-shard-02-02.akkzw.mongodb.net:27016', 'demo-shard-00-01.akkzw.mongodb.net:27016', 'demo-shard-00-02.akkzw.mongodb.net:27016', 'demo-shard-01-00.akkzw.mongodb.net:27016', 'demo-shard-02-00.akkzw.mongodb.net:27016', 'demo-shard-00-00.akkzw.mongodb.net:27016'], document_class=dict, tz_aware=False, connect=True, authsource='admin', tls=True, serverselectiontimeoutms=5000)\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:12:50.41\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.build\u001b[0m:\u001b[36m38  \u001b[0m | \u001b[1mConnecting to Metadata Client with engine:  MongoClient(host=['demo-shard-02-01.akkzw.mongodb.net:27016', 'demo-shard-01-02.akkzw.mongodb.net:27016', 'demo-shard-01-01.akkzw.mongodb.net:27016', 'demo-shard-02-02.akkzw.mongodb.net:27016', 'demo-shard-00-01.akkzw.mongodb.net:27016', 'demo-shard-00-02.akkzw.mongodb.net:27016', 'demo-shard-01-00.akkzw.mongodb.net:27016', 'demo-shard-02-00.akkzw.mongodb.net:27016', 'demo-shard-00-00.akkzw.mongodb.net:27016'], document_class=dict, tz_aware=False, connect=True, authsource='admin', tls=True, serverselectiontimeoutms=5000)\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:12:50.41\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.build\u001b[0m:\u001b[36m148 \u001b[0m | \u001b[1mConnecting to compute client: local\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:12:50.41\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.datalayer\u001b[0m:\u001b[36m79  \u001b[0m | \u001b[1mBuilding Data Layer\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "uri = 'mongodb+srv://superduperdb_leafsteroids_ro:superduperdb_leafsteroids_ro**@demo.akkzw.mongodb.net/Leafsteroids'\n",
    "artifact_store =  'filesystem:///tmp/players'\n",
    "metadata_store = 'sqlite:///:memory:'\n",
    "db = superduper(uri)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b26980a4-b3c3-49e7-aff1-c0aa9b6eeacd",
   "metadata": {},
   "outputs": [],
   "source": [
    "player_movement = Collection('recordings')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f1220066-d0a1-4528-b8f4-8fcc0f3e6ca4",
   "metadata": {},
   "outputs": [],
   "source": [
    "movements = list(db.execute(player_movement.find({})))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "10d5e12d-15a0-4941-927c-7704e0ab5bce",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = []\n",
    "from superduperdb import Document\n",
    "for movement in movements:\n",
    "    movement = movement.unpack()\n",
    "    del movement['_id']\n",
    "    \n",
    "    del movement['DateTime']\n",
    "    data.append(Document(movement))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2fb515cf-586d-41e1-9f0a-6cb8941e265c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:12:57.21\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.build\u001b[0m:\u001b[36m65  \u001b[0m | \u001b[1mData Client is ready. mongomock.MongoClient('localhost', 27017)\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:12:57.21\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.build\u001b[0m:\u001b[36m38  \u001b[0m | \u001b[1mConnecting to Metadata Client with engine:  mongomock.MongoClient('localhost', 27017)\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:12:57.21\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.build\u001b[0m:\u001b[36m148 \u001b[0m | \u001b[1mConnecting to compute client: local\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:12:57.21\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.datalayer\u001b[0m:\u001b[36m79  \u001b[0m | \u001b[1mBuilding Data Layer\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "uri = 'mongomock://players'\n",
    "db = superduper(uri) #artifact_store=artifact_store, metadata_store=metadata_store)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a9a6d8ef-d47b-423e-9bb6-2b52025c9522",
   "metadata": {},
   "outputs": [],
   "source": [
    "player_movement = Collection('recordings')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e01812c8-b339-44ac-8224-a592cdd665c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "_ = [json.dumps(data[1].unpack()) for i in range(len(data))] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1e180957-cee9-4735-95e9-4877a68f82fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:12:58.89\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.backends.local.compute\u001b[0m:\u001b[36m32  \u001b[0m | \u001b[1mSubmitting job. function:<function callable_job at 0x1387511c0>\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:13:00.02\u001b[0m| \u001b[32m\u001b[1mSUCCESS \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.backends.local.compute\u001b[0m:\u001b[36m38  \u001b[0m | \u001b[32m\u001b[1mJob submitted.  function:<function callable_job at 0x1387511c0> future:294d4bb4-e893-4c04-a2d2-39ff091815ca\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([ObjectId('65dc79429e14981bdc3e8b62'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b63'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b64'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b65'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b66'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b67'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b68'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b69'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b6a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b6b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b6c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b6d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b6e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b6f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b70'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b71'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b72'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b73'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b74'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b75'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b76'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b77'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b78'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b79'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b7a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b7b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b7c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b7d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b7e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b7f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b80'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b81'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b82'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b83'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b84'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b85'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b86'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b87'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b88'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b89'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b8a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b8b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b8c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b8d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b8e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b8f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b90'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b91'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b92'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b93'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b94'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b95'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b96'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b97'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b98'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b99'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b9a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b9b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b9c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b9d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b9e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8b9f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba0'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba1'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba2'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba3'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba4'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba5'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba6'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba7'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba8'),\n",
       "  ObjectId('65dc79429e14981bdc3e8ba9'),\n",
       "  ObjectId('65dc79429e14981bdc3e8baa'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bab'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bac'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bad'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bae'),\n",
       "  ObjectId('65dc79429e14981bdc3e8baf'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb0'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb1'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb2'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb3'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb4'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb5'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb6'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb7'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb8'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bb9'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bba'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bbb'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bbc'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bbd'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bbe'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bbf'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc0'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc1'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc2'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc3'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc4'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc5'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc6'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc7'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc8'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bc9'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bca'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bcb'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bcc'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bcd'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bce'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bcf'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd0'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd1'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd2'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd3'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd4'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd5'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd6'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd7'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd8'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bd9'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bda'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bdb'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bdc'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bdd'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bde'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bdf'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be0'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be1'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be2'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be3'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be4'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be5'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be6'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be7'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be8'),\n",
       "  ObjectId('65dc79429e14981bdc3e8be9'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bea'),\n",
       "  ObjectId('65dc79429e14981bdc3e8beb'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bec'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bed'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bee'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bef'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf0'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf1'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf2'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf3'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf4'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf5'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf6'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf7'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf8'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bf9'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bfa'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bfb'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bfc'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bfd'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bfe'),\n",
       "  ObjectId('65dc79429e14981bdc3e8bff'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c00'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c01'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c02'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c03'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c04'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c05'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c06'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c07'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c08'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c09'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c0a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c0b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c0c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c0d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c0e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c0f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c10'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c11'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c12'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c13'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c14'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c15'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c16'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c17'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c18'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c19'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c1a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c1b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c1c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c1d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c1e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c1f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c20'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c21'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c22'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c23'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c24'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c25'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c26'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c27'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c28'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c29'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c2a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c2b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c2c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c2d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c2e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c2f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c30'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c31'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c32'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c33'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c34'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c35'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c36'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c37'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c38'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c39'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c3a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c3b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c3c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c3d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c3e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c3f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c40'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c41'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c42'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c43'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c44'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c45'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c46'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c47'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c48'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c49'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c4a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c4b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c4c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c4d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c4e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c4f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c50'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c51'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c52'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c53'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c54'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c55'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c56'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c57'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c58'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c59'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c5a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c5b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c5c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c5d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c5e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c5f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c60'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c61'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c62'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c63'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c64'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c65'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c66'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c67'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c68'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c69'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c6a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c6b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c6c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c6d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c6e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c6f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c70'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c71'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c72'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c73'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c74'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c75'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c76'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c77'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c78'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c79'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c7a'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c7b'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c7c'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c7d'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c7e'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c7f'),\n",
       "  ObjectId('65dc79429e14981bdc3e8c80')],\n",
       " TaskWorkflow(database=<superduperdb.base.datalayer.Datalayer object at 0x28de55850>, G=<networkx.classes.digraph.DiGraph object at 0x28de81a50>))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "db.execute(player_movement.insert_many(data))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "342f0b96-6b97-4c98-95ab-f734a8d03bee",
   "metadata": {},
   "source": [
    "# Solutions:\n",
    "We will solve this issue into ways \n",
    "- Without SuperDuperDB\n",
    "- With SuperDuperDB\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75570c23",
   "metadata": {},
   "source": [
    "### Solution without SuperDuperDB\n",
    "We would createa a custom function that\n",
    "- Analysis Player movemnet speed and acceleration\n",
    "- Estimate Player next movement\n",
    "- Cluster and do a similarity search of plyaers with similar movement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4113f04b-6528-4639-9c0b-e1bafc0425f7",
   "metadata": {},
   "source": [
    "# Most Similar players"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ee8c585a-97e2-4330-8617-f315478fa449",
   "metadata": {},
   "outputs": [],
   "source": [
    "class PlayerSearch:\n",
    "    def __init__(self):\n",
    "        \"\"\"\n",
    "        Initializes the PlayerSearch class, setting up the database connection and preparing the\n",
    "        movement data for analysis.\n",
    "\n",
    "        :param db: The database connection object.\n",
    "        \"\"\"\n",
    "        self.array_movements = []\n",
    "        self.features()\n",
    "        \n",
    "    @staticmethod\n",
    "    def calculate_angles(movement):\n",
    "        \"\"\"\n",
    "        Calculates the angles between consecutive movement vectors to analyze directional changes.\n",
    "\n",
    "        :param movement: A NumPy array of positions, where each position is a point in 3D space.\n",
    "        :return: A NumPy array of angles between consecutive vectors in radians.\n",
    "        \"\"\"\n",
    "        vectors = np.diff(movement, axis=0)\n",
    "        norms = np.linalg.norm(vectors, axis=1)\n",
    "        unit_vectors = vectors / norms[:, np.newaxis]\n",
    "        angles = np.arccos(np.clip(np.dot(unit_vectors[:-1], unit_vectors[1:].T), -1.0, 1.0))\n",
    "        return angles\n",
    "    \n",
    "    @staticmethod\n",
    "    def calculate_speed(movement):\n",
    "        \"\"\"\n",
    "        Calculates the speed at each point in a movement path based on the Euclidean distance\n",
    "        between consecutive points.\n",
    "\n",
    "        :param movement: A NumPy array of positions, where each position is a point in 3D space.\n",
    "        :return: A NumPy array of speeds at each point in the movement.\n",
    "        \"\"\"\n",
    "        if len(movement.shape) == 1:\n",
    "            return []\n",
    "        dx = np.diff(movement[:, 0])\n",
    "        dy = np.diff(movement[:, 1])\n",
    "        dz = np.diff(movement[:, 2])\n",
    "        speed = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "        return speed\n",
    "        \n",
    "    @staticmethod\n",
    "    def calculate_acceleration(movement):\n",
    "        \"\"\"\n",
    "        Calculates the acceleration by finding the change in speed over a fixed time step.\n",
    "\n",
    "        :param movement: A NumPy array of positions, where each position is a point in 3D space.\n",
    "        :return: A NumPy array of acceleration values for each point in the movement, excluding the first.\n",
    "        \"\"\"\n",
    "        if len(movement.shape) == 1:\n",
    "            return []\n",
    "        speed = PlayerSearch.calculate_speed(movement)\n",
    "        dt = 1  # Assuming a constant time step of 1 unit.\n",
    "        acceleration = np.diff(speed) / dt\n",
    "        return acceleration\n",
    "\n",
    "        \n",
    "\n",
    "    def array(self, movement):\n",
    "        \"\"\"\n",
    "        Converts a list of dictionaries containing position data into a NumPy array for numerical analysis.\n",
    "\n",
    "        :param movement: A list of dictionaries, where each dictionary represents a snapshot containing a 'Position' key.\n",
    "        :return: A NumPy array of positions extracted from the input list.\n",
    "        \"\"\"\n",
    "        movement = list(map(lambda x: list(x['Position'].values()), movement))\n",
    "        \n",
    "        movement = np.asarray(movement)\n",
    "        return movement\n",
    "        \n",
    "    def features(self):\n",
    "        \"\"\"\n",
    "        Retrieves all player movements from the database, processes each record to calculate and store\n",
    "        acceleration and speed, along with metadata.\n",
    "        \"\"\"\n",
    "        movements = list(db.execute(player_movement.find({})))\n",
    "        array_movements = []\n",
    "        self.players = {}\n",
    "        \n",
    "        for i, movement in tqdm.tqdm(enumerate(movements)):\n",
    "            array = list(map(lambda x: list(x['Position'].values()), movement['Snapshots']))\n",
    "            \n",
    "            array = np.asarray(array)\n",
    "            if array.shape[0] == 0:\n",
    "                continue\n",
    "                    \n",
    "            array_movements.append(array)\n",
    "            player = movement['Player']['Nickname']\n",
    "            id = movement['_id']\n",
    "           \n",
    "            acceleration = self.calculate_acceleration(array)\n",
    "            speed = self.calculate_speed(array)\n",
    "            \n",
    "            self.players[i] = {'metadata': movement, 'acceleration': acceleration, 'speed': speed}\n",
    "        self.array_movements = array_movements\n",
    "    \n",
    "    def similarity(self, new_player_movement, top_k=10):\n",
    "        \"\"\"\n",
    "        Calculates the similarity between a new player's movement and stored movements using a distance metric.\n",
    "\n",
    "        :param new_player_movement: A NumPy array representing the new player's movement to compare.\n",
    "        :param top_k: The number of most similar movements to return.\n",
    "        :return: A list of dictionaries containing data for the top_k most similar movements.\n",
    "        \"\"\"\n",
    "        distances = []\n",
    "        for movement in self.array_movements:\n",
    "            distances.append(fastdtw(new_player_movement, movement)[0])\n",
    "              \n",
    "        distances = np.nan_to_num(distances)\n",
    "        \n",
    "        distance_dict = {i: d for i, d in enumerate(distances)}\n",
    "        most_similar = sorted(distance_dict.items(), key=lambda x: x[1])[:top_k]\n",
    "        return [self.players[m[0]] for m in most_similar]\n",
    "        \n",
    "\n",
    "    def similar(self, player_name):\n",
    "        \"\"\"\n",
    "        Finds movements similar to a specified player's movements.\n",
    "\n",
    "        :param player_name: The nickname of the player whose movements to compare.\n",
    "        :return: A list of player movements that are similar to the specified player's movements.\n",
    "        \"\"\"\n",
    "        movement = db.execute(player_movement.find_one({'Player.Nickname': player_name}))\n",
    "        movement = self.array(movement['Snapshots'])\n",
    "        return self.similarity(movement)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "4f818948-c27e-441c-8e1c-d6272259aef1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pl = PlayerSearch()\n",
    "#most_similars = pl.similar('Dominic')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8ffbd6cf-bf6e-44d8-9f45-ba3cf6c72756",
   "metadata": {},
   "outputs": [],
   "source": [
    "#most_similars[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93c7c1aa-2c56-4e1c-b111-9676191b7a95",
   "metadata": {},
   "source": [
    "# Solution using SuperDuperDB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "18d9db48-2598-4740-bb62-a9beb24a8c08",
   "metadata": {},
   "outputs": [],
   "source": [
    "import functools\n",
    "MAX_LENGTH = 1000\n",
    "def _player_movement(player, db=None):\n",
    "    xs = list(db.execute(Collection('recordings').find({'Player.Nickname': player}))) \n",
    "    x = list(map(lambda x: list(x['Position'].values()), xs[0]['Snapshots']))\n",
    "    x = np.asarray(x)\n",
    "    return x\n",
    "    \n",
    "\n",
    "player_movement_model = Model(identifier='player', object=functools.partial(_player_movement, db=db))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "025dedd1-d22e-4e27-9da8-03d98a1945ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:13:00.05\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.backends.local.compute\u001b[0m:\u001b[36m32  \u001b[0m | \u001b[1mSubmitting job. function:<function method_job at 0x138750f40>\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "287it [00:00, 80390.36it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:13:01.45\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.components.model\u001b[0m:\u001b[36m598 \u001b[0m | \u001b[1mAdding 287 model outputs to `db`\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:13:02.09\u001b[0m| \u001b[32m\u001b[1mSUCCESS \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.backends.local.compute\u001b[0m:\u001b[36m38  \u001b[0m | \u001b[32m\u001b[1mJob submitted.  function:<function method_job at 0x138750f40> future:c2e8724f-a5a3-459d-9108-709dde2cf73f\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([<superduperdb.jobs.job.ComponentJob at 0x290a17810>],\n",
       " Listener(identifier='flatten/Snapshots', key='Snapshots', model=ObjectModel(identifier='flatten', signature='*args,**kwargs', datatype=DataType(identifier='numpy.float64[1000x3]', encoder=<superduperdb.ext.numpy.encoder.EncodeArray object at 0x290987550>, decoder=<superduperdb.ext.numpy.encoder.DecodeArray object at 0x2909c04d0>, info=None, shape=[1000, 3], artifact=False, reference=False, directory=None), output_schema=None, flatten=False, model_update_kwargs={'document_embedded': True}, metrics=(), validation_sets=None, predict_kwargs={}, object=<function flatten_movements at 0x163c61080>, num_workers=0), select=<superduperdb.backends.mongodb.query.MongoCompoundSelect[\n",
       "     \u001b[92m\u001b[1mrecordings.find({}, {})\u001b[0m\n",
       " ] object at 0x2909c0ad0>, active=True, predict_kwargs={}))"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "def flatten_movements(x):\n",
    "    \"\"\"\n",
    "    Converts a list of movement dictionaries into a 2D NumPy array where each row represents the positional values \n",
    "    (X, Y, Z coordinates) from one dictionary.\n",
    "\n",
    "    The function iterates over each element in the input list, assuming each element is a dictionary with a 'Position'\n",
    "    key. The values of this key are expected to be another dictionary containing the coordinates. These coordinate \n",
    "    values are extracted, converted to a list, and then the entire collection is transformed into a NumPy array.\n",
    "\n",
    "    :param x: A list of dictionaries, where each dictionary represents a movement snapshot with a 'Position' key that\n",
    "              maps to a dictionary of coordinate values.\n",
    "    :return: A 2D NumPy array where each row contains the coordinate values from one movement snapshot.\n",
    "    \"\"\"\n",
    "    x = list(map(lambda x: list(x['Position'].values()), x))\n",
    "    x =  np.asarray(x)\n",
    "    if x.shape[0] ==0:\n",
    "        x = np.ones((MAX_LENGTH, 3)) *-100\n",
    "    else:\n",
    "        pad_width = [(0, max(MAX_LENGTH - x.shape[0], 0)), (0, 0)]\n",
    "        x = np.pad(x, pad_width, mode='constant', constant_values=-100)\n",
    "    return x\n",
    "    \n",
    "a = array('float64', [MAX_LENGTH, 3])\n",
    "model = Model(identifier='flatten', object=flatten_movements, datatype=a, model_update_kwargs={'document_embedded': True})\n",
    "\n",
    "flatten_listener = Listener(model=model, key='Snapshots', select=player_movement.find({}))\n",
    "db.add(flatten_listener)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e73a21d-35aa-4c2a-9666-639ffe585a84",
   "metadata": {},
   "source": [
    "### Get acceleration, Speed and angle of movement as soon as they are added."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ad25506b-4740-42a7-9b83-a47e9b59a2e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:13:02.10\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.backends.local.compute\u001b[0m:\u001b[36m32  \u001b[0m | \u001b[1mSubmitting job. function:<function method_job at 0x138750f40>\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "287it [00:00, 82331.25it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:13:03.20\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.components.model\u001b[0m:\u001b[36m598 \u001b[0m | \u001b[1mAdding 287 model outputs to `db`\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:13:03.85\u001b[0m| \u001b[32m\u001b[1mSUCCESS \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.backends.local.compute\u001b[0m:\u001b[36m38  \u001b[0m | \u001b[32m\u001b[1mJob submitted.  function:<function method_job at 0x138750f40> future:fa35579f-e359-4f8f-be76-12426bf2559b\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:13:03.86\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.backends.local.compute\u001b[0m:\u001b[36m32  \u001b[0m | \u001b[1mSubmitting job. function:<function method_job at 0x138750f40>\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "287it [00:00, 68182.68it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:13:04.71\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.components.model\u001b[0m:\u001b[36m598 \u001b[0m | \u001b[1mAdding 287 model outputs to `db`\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:13:05.36\u001b[0m| \u001b[32m\u001b[1mSUCCESS \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.backends.local.compute\u001b[0m:\u001b[36m38  \u001b[0m | \u001b[32m\u001b[1mJob submitted.  function:<function method_job at 0x138750f40> future:fdc4a47e-ffef-4cd6-859c-997639693709\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([<superduperdb.jobs.job.ComponentJob at 0x28dfa8990>],\n",
       " Listener(identifier='acceleration/_outputs.Snapshots.speed.0', key='_outputs.Snapshots.speed.0', model=ObjectModel(identifier='acceleration', signature='*args,**kwargs', datatype=DataType(identifier='numpy.float64[1000x3]', encoder=<superduperdb.ext.numpy.encoder.EncodeArray object at 0x179adafd0>, decoder=<superduperdb.ext.numpy.encoder.DecodeArray object at 0x17b2199d0>, info=None, shape=[1000, 3], artifact=False, reference=False, directory=None), output_schema=None, flatten=False, model_update_kwargs={'document_embedded': True}, metrics=(), validation_sets=None, predict_kwargs={}, object=<function calculate_acceleration at 0x17d130b80>, num_workers=0), select=<superduperdb.backends.mongodb.query.MongoCompoundSelect[\n",
       "     \u001b[92m\u001b[1mrecordings.find({}, {})\u001b[0m\n",
       " ] object at 0x163907f90>, active=True, predict_kwargs={}))"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def calculate_speed(x):\n",
    "    \"\"\"\n",
    "    Calculates the speed at each point in a movement path based on the Euclidean distance\n",
    "    between consecutive points.\n",
    "\n",
    "    :param movement: A NumPy array of positions, where each position is a point in 3D space.\n",
    "    :return: A NumPy array of speeds at each point in the movement.\n",
    "    \"\"\"\n",
    "    x = list(map(lambda x: list(x['Position'].values()), x))\n",
    "    movement =  np.asarray(x)\n",
    "    if len(movement.shape) == 1:\n",
    "        return np.asarray([])\n",
    "    dx = np.diff(movement[:, 0])\n",
    "    dy = np.diff(movement[:, 1])\n",
    "    dz = np.diff(movement[:, 2])\n",
    "    speed = np.sqrt(dx**2 + dy**2 + dz**2)\n",
    "    return speed\n",
    "def calculate_acceleration(speed):\n",
    "    \"\"\"\n",
    "    Calculates the acceleration by finding the change in speed over a fixed time step.\n",
    "\n",
    "    :param movement: A NumPy array of positions, where each position is a point in 3D space.\n",
    "    :return: A NumPy array of acceleration values for each point in the movement, excluding the first.\n",
    "    \"\"\"\n",
    "    if speed.shape[0] == 0:\n",
    "        return np.asarray([])\n",
    "    dt = 1  # Assuming a constant time step of 1 unit.\n",
    "    acceleration = np.diff(speed) / dt\n",
    "    return acceleration\n",
    "\n",
    "a = array('float64', [MAX_LENGTH, 3])\n",
    "model = Model(identifier='speed', object=calculate_speed, datatype=a, model_update_kwargs={'document_embedded': True})\n",
    "\n",
    "speed_listener = Listener(model=model, key='Snapshots', select=player_movement.find({}))\n",
    "db.add(speed_listener)\n",
    "\n",
    "model = Model(identifier='acceleration', object=calculate_acceleration, datatype=a, model_update_kwargs={'document_embedded': True})\n",
    "\n",
    "acceleration_listener = Listener(model=model, key='_outputs.Snapshots.speed.0', select=player_movement.find({}))\n",
    "db.add(acceleration_listener)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4fc263a5-a73c-4afe-8909-f64aaa0fe7b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Snapshots': {'flatten': {'0': array([   0. ,   -0.1,    0. , ..., -100. , -100. , -100. ])},\n",
       "  'speed': {'0': array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 1.99999988e-01, 3.16227747e-01,\n",
       "          0.00000000e+00, 2.99999982e-01, 4.99999970e-01, 5.00000089e-01,\n",
       "          3.00000072e-01, 4.99999970e-01, 4.99999940e-01, 2.00000018e-01,\n",
       "          5.00000000e-01, 4.99999970e-01, 2.98023224e-08, 4.99999970e-01,\n",
       "          2.99999952e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          3.00000042e-01, 5.00000119e-01, 5.00000119e-01, 3.00000072e-01,\n",
       "          5.00000119e-01, 3.00000072e-01, 3.00000072e-01, 5.00000119e-01,\n",
       "          2.00000048e-01, 4.99999911e-01, 1.99070533e-01, 5.00010699e-01,\n",
       "          5.00010699e-01, 2.00010717e-01, 5.38511158e-01, 3.00011993e-01,\n",
       "          5.00010699e-01, 2.99989254e-01, 1.60379696e-05, 5.00010699e-01,\n",
       "          2.00010777e-01, 1.60379696e-05, 1.60379696e-05, 1.60379696e-05,\n",
       "          1.60379696e-05, 1.60379696e-05, 1.60379696e-05, 1.60379696e-05,\n",
       "          1.60379696e-05, 1.60379696e-05, 1.60379696e-05, 1.60379696e-05,\n",
       "          1.60379696e-05, 1.60379696e-05, 1.60379696e-05, 1.60379696e-05,\n",
       "          1.60379696e-05, 1.60379696e-05, 1.60379696e-05, 1.60379696e-05,\n",
       "          1.60379696e-05, 1.60379696e-05, 1.60379696e-05, 2.99989343e-01,\n",
       "          4.99989240e-01, 1.60379696e-05, 5.00010697e-01, 5.00010848e-01,\n",
       "          5.00010848e-01, 1.60379696e-05, 2.99989343e-01, 2.00010777e-01,\n",
       "          1.60379696e-05, 2.00010777e-01, 1.60379696e-05, 1.99989319e-01,\n",
       "          5.00010848e-01, 1.60379696e-05, 5.38508884e-01, 2.82841347e-01,\n",
       "          1.64858302e-05, 1.64858302e-05, 4.99989033e-01, 5.83079689e-01,\n",
       "          7.07090555e-01, 7.07090476e-01, 4.99987625e-01, 4.99987692e-01,\n",
       "          4.99987543e-01, 5.38501861e-01, 1.64858302e-05, 1.64858302e-05,\n",
       "          2.00010719e-01, 5.00010697e-01, 5.00010848e-01, 5.00010848e-01,\n",
       "          5.00010848e-01, 5.00010252e-01, 5.00010252e-01, 3.60550618e-01,\n",
       "          4.99987722e-01, 7.07105264e-01, 5.38500914e-01, 7.07090091e-01,\n",
       "          7.07090260e-01, 5.83079300e-01, 3.00011635e-01, 5.00011444e-01,\n",
       "          5.00011444e-01, 5.38531020e-01, 7.07122123e-01, 4.24279680e-01,\n",
       "          1.60379696e-05, 1.60379696e-05, 4.99988794e-01, 4.12296002e-01,\n",
       "          4.99987602e-01, 4.99987602e-01, 7.07090175e-01, 7.07090513e-01,\n",
       "          7.07090513e-01, 5.83079075e-01, 4.63586843e-01, 4.99905551e-01,\n",
       "          4.99999523e-01, 4.99999523e-01, 5.38516056e-01, 7.07107772e-01,\n",
       "          7.07108109e-01, 5.00000060e-01, 5.38516875e-01, 7.07108214e-01,\n",
       "          5.58413289e-01, 7.74310902e-03, 2.55509294e-02, 4.99999642e-01,\n",
       "          5.00000119e-01, 2.00000048e-01, 6.40313470e-01, 5.83096846e-01,\n",
       "          0.00000000e+00, 2.00000018e-01, 1.00000024e-01, 0.00000000e+00,\n",
       "          5.00000030e-01, 4.99999970e-01, 5.00000000e-01, 5.00000119e-01,\n",
       "          5.00000119e-01, 4.99999881e-01, 4.99999523e-01, 4.99999523e-01,\n",
       "          4.99999523e-01, 5.38516543e-01, 7.07107793e-01, 7.07107793e-01,\n",
       "          4.99999523e-01, 5.38516321e-01, 5.83096678e-01, 5.00001907e-01,\n",
       "          4.99999523e-01, 2.99999714e-01, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 1.99999809e-01, 4.99999523e-01,\n",
       "          4.99999523e-01, 4.99999523e-01, 4.99999523e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          1.00000381e-01, 5.00001907e-01, 5.00001907e-01, 4.99999523e-01,\n",
       "          6.40313005e-01, 5.83096678e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.38518181e-01,\n",
       "          7.07107793e-01, 5.09903803e-01, 6.40313675e-01, 7.07107793e-01,\n",
       "          7.07107793e-01, 5.09901559e-01, 5.00000954e-01, 3.00001144e-01,\n",
       "          2.00000763e-01, 5.00001431e-01, 4.99999523e-01, 5.83096678e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 1.00000381e-01, 5.00001907e-01,\n",
       "          5.38518181e-01, 7.07107793e-01, 7.07108804e-01, 1.00000381e-01,\n",
       "          0.00000000e+00, 2.00000763e-01, 5.00000477e-01, 4.99999523e-01,\n",
       "          1.99999809e-01, 5.38516321e-01, 7.07109141e-01, 7.07109479e-01,\n",
       "          7.07109479e-01, 5.09903896e-01, 4.00001526e-01, 5.00001907e-01,\n",
       "          5.83097414e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          7.07108804e-01, 7.07107793e-01, 5.83095369e-01, 4.00001526e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.38518181e-01,\n",
       "          5.83095369e-01, 4.99999523e-01, 5.00001907e-01, 6.40314866e-01,\n",
       "          5.09903896e-01, 5.00001907e-01, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 4.00001526e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.38518535e-01, 5.83097414e-01, 5.00001431e-01,\n",
       "          4.99999523e-01, 4.99999523e-01, 4.99999523e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 6.40313675e-01, 5.83095369e-01,\n",
       "          5.38516321e-01, 7.04896184e-01, 7.07638533e-01, 5.83009096e-01,\n",
       "          6.40317852e-01, 5.09967492e-01, 1.00076692e-01, 7.07095998e-01,\n",
       "          7.07095998e-01, 4.12400031e-01, 5.00078205e-01, 5.00078205e-01,\n",
       "          5.00078205e-01, 5.00078205e-01, 5.38568127e-01, 7.07122972e-01,\n",
       "          7.07117576e-01, 7.07116228e-01, 7.07116228e-01, 7.07116228e-01,\n",
       "          7.07116228e-01, 7.07116228e-01, 3.16149964e-01, 4.99916080e-01,\n",
       "          4.99916080e-01, 4.99916080e-01, 5.10412304e-01, 4.70706081e-01,\n",
       "          5.94705794e-01, 7.06839740e-01, 4.99839827e-01, 4.99839827e-01,\n",
       "          4.99839827e-01, 7.06842437e-01, 7.06846483e-01, 5.09702868e-01,\n",
       "          5.00211743e-01, 5.00207928e-01, 5.00202206e-01, 5.00202206e-01,\n",
       "          5.00202206e-01, 5.00202206e-01, 6.40572531e-01, 5.00164076e-01,\n",
       "          5.00164076e-01, 7.07069069e-01, 5.83125607e-01, 5.00164076e-01,\n",
       "          5.38745584e-01, 7.07365732e-01, 7.07365732e-01, 5.83341443e-01,\n",
       "          2.23489214e-01, 4.99782589e-01, 4.99782589e-01, 4.99782589e-01,\n",
       "          7.06839740e-01, 5.53602116e-01, 5.00391765e-01, 0.00000000e+00,\n",
       "          4.00021048e-01, 5.00002884e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          3.00001144e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "          0.00000000e+00, 5.00000954e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 4.00001526e-01,\n",
       "          5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "          5.00001907e-01])},\n",
       "  'acceleration': {'0': array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  1.99999988e-01,  1.16227759e-01, -3.16227747e-01,\n",
       "           2.99999982e-01,  1.99999988e-01,  1.19209290e-07, -2.00000018e-01,\n",
       "           1.99999899e-01, -2.98023224e-08, -2.99999923e-01,  2.99999982e-01,\n",
       "          -2.98023224e-08, -4.99999940e-01,  4.99999940e-01, -2.00000018e-01,\n",
       "          -2.99999952e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  3.00000042e-01,\n",
       "           2.00000077e-01,  0.00000000e+00, -2.00000048e-01,  2.00000048e-01,\n",
       "          -2.00000048e-01,  0.00000000e+00,  2.00000048e-01, -3.00000072e-01,\n",
       "           2.99999863e-01, -3.00929378e-01,  3.00940166e-01,  0.00000000e+00,\n",
       "          -2.99999982e-01,  3.38500441e-01, -2.38499166e-01,  1.99998707e-01,\n",
       "          -2.00021446e-01, -2.99973216e-01,  4.99994661e-01, -2.99999922e-01,\n",
       "          -1.99994739e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  2.99973305e-01,  1.99999897e-01,\n",
       "          -4.99973202e-01,  4.99994659e-01,  1.50874257e-07,  0.00000000e+00,\n",
       "          -4.99994810e-01,  2.99973305e-01, -9.99785661e-02, -1.99994739e-01,\n",
       "           1.99994739e-01, -1.99994739e-01,  1.99973281e-01,  3.00021529e-01,\n",
       "          -4.99994810e-01,  5.38492846e-01, -2.55667536e-01, -2.82824862e-01,\n",
       "           0.00000000e+00,  4.99972547e-01,  8.30906558e-02,  1.24010866e-01,\n",
       "          -7.90253500e-08, -2.07102851e-01,  6.70552254e-08, -1.49011612e-07,\n",
       "           3.85143179e-02, -5.38485375e-01,  0.00000000e+00,  1.99994233e-01,\n",
       "           2.99999978e-01,  1.50874257e-07,  0.00000000e+00,  0.00000000e+00,\n",
       "          -5.96046448e-07,  0.00000000e+00, -1.39459634e-01,  1.39437103e-01,\n",
       "           2.07117543e-01, -1.68604350e-01,  1.68589177e-01,  1.68587213e-07,\n",
       "          -1.24010959e-01, -2.83067665e-01,  1.99999809e-01,  0.00000000e+00,\n",
       "           3.85195759e-02,  1.68591103e-01, -2.82842443e-01, -4.24263642e-01,\n",
       "           0.00000000e+00,  4.99972756e-01, -8.76927922e-02,  8.76916001e-02,\n",
       "           0.00000000e+00,  2.07102573e-01,  3.37175311e-07,  0.00000000e+00,\n",
       "          -1.24011437e-01, -1.19492232e-01,  3.63187074e-02,  9.39725494e-05,\n",
       "           0.00000000e+00,  3.85165325e-02,  1.68591716e-01,  3.37175361e-07,\n",
       "          -2.07108049e-01,  3.85168151e-02,  1.68591339e-01, -1.48694925e-01,\n",
       "          -5.50670180e-01,  1.78078204e-02,  4.74448713e-01,  4.76778950e-07,\n",
       "          -3.00000072e-01,  4.40313422e-01, -5.72166236e-02, -5.83096846e-01,\n",
       "           2.00000018e-01, -9.99999940e-02, -1.00000024e-01,  5.00000030e-01,\n",
       "          -5.96046448e-08,  2.98023224e-08,  1.19209290e-07,  0.00000000e+00,\n",
       "          -2.38418579e-07, -3.57627869e-07,  0.00000000e+00,  0.00000000e+00,\n",
       "           3.85170195e-02,  1.68591250e-01,  0.00000000e+00, -2.07108270e-01,\n",
       "           3.85167982e-02,  4.45803565e-02, -8.30947705e-02, -2.38418579e-06,\n",
       "          -1.99999809e-01, -2.99999714e-01,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  1.99999809e-01,  2.99999714e-01,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  2.38418579e-06,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -4.00001526e-01,\n",
       "           4.00001526e-01,  0.00000000e+00, -2.38418579e-06,  1.40313481e-01,\n",
       "          -5.72163268e-02, -8.30947705e-02,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  3.85162735e-02,  1.68589612e-01,\n",
       "          -1.97203990e-01,  1.30409872e-01,  6.67941179e-02,  0.00000000e+00,\n",
       "          -1.97206234e-01, -9.90060492e-03, -1.99999809e-01, -1.00000381e-01,\n",
       "           3.00000668e-01, -1.90734863e-06,  8.30971547e-02, -8.30947705e-02,\n",
       "           0.00000000e+00, -4.00001526e-01,  4.00001526e-01,  3.85162735e-02,\n",
       "           1.68589612e-01,  1.01152268e-06, -6.07108423e-01, -1.00000381e-01,\n",
       "           2.00000763e-01,  2.99999714e-01, -9.53674316e-07, -2.99999714e-01,\n",
       "           3.38516512e-01,  1.68592820e-01,  3.37174708e-07,  0.00000000e+00,\n",
       "          -1.97205582e-01, -1.09902371e-01,  1.00000381e-01,  8.30955065e-02,\n",
       "          -8.30955065e-02,  0.00000000e+00,  0.00000000e+00,  2.07106897e-01,\n",
       "          -1.01152268e-06, -1.24012423e-01, -1.83093844e-01,  1.00000381e-01,\n",
       "           0.00000000e+00,  0.00000000e+00,  3.85162735e-02,  4.45771886e-02,\n",
       "          -8.30958462e-02,  2.38418579e-06,  1.40312959e-01, -1.30410970e-01,\n",
       "          -9.90198913e-03, -5.00001907e-01,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  4.00001526e-01,  1.00000381e-01,  0.00000000e+00,\n",
       "           3.85166276e-02,  4.45788788e-02, -8.30959833e-02, -1.90734863e-06,\n",
       "           0.00000000e+00,  0.00000000e+00,  2.38418579e-06,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  1.40311767e-01, -5.72183054e-02, -4.45790481e-02,\n",
       "           1.66379863e-01,  2.74234912e-03, -1.24629437e-01,  5.73087563e-02,\n",
       "          -1.30350360e-01, -4.09890800e-01,  6.07019306e-01,  0.00000000e+00,\n",
       "          -2.94695967e-01,  8.76781735e-02,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  3.84899226e-02,  1.68554845e-01, -5.39549625e-06,\n",
       "          -1.34886763e-06,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00, -3.90966264e-01,  1.83766116e-01,  0.00000000e+00,\n",
       "           0.00000000e+00,  1.04962240e-02, -3.97062233e-02,  1.23999714e-01,\n",
       "           1.12133945e-01, -2.06999913e-01,  0.00000000e+00,  0.00000000e+00,\n",
       "           2.07002610e-01,  4.04589287e-06, -1.97143615e-01, -9.49112511e-03,\n",
       "          -3.81469706e-06, -5.72204559e-06,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  1.40370325e-01, -1.40408455e-01,  0.00000000e+00,\n",
       "           2.06904993e-01, -1.23943462e-01, -8.29615308e-02,  3.85815080e-02,\n",
       "           1.68620148e-01,  0.00000000e+00, -1.24024289e-01, -3.59852229e-01,\n",
       "           2.76293374e-01,  0.00000000e+00,  0.00000000e+00,  2.07057151e-01,\n",
       "          -1.53237624e-01, -5.32103512e-02, -5.00391765e-01,  4.00021048e-01,\n",
       "           9.99818350e-02, -9.76152349e-07,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -2.00000763e-01,\n",
       "          -3.00001144e-01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           5.00000954e-01,  9.53674316e-07,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "           0.00000000e+00,  0.00000000e+00, -1.00000381e-01,  1.00000381e-01,\n",
       "           0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00])}}}"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(db.execute(player_movement.find({})))[11].unpack()['_outputs']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "23759cba-1cac-4379-83f1-bd4427082401",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['player_movements']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from superduperdb import Listener, VectorIndex\n",
    "\n",
    "def measure(x, y):\n",
    "    y = y.reshape(-1, MAX_LENGTH, 3)\n",
    "    similarity_scores = np.zeros(y.shape[0])\n",
    "\n",
    "    for i in range(y.shape[0]):\n",
    "        _y = y[i]\n",
    "        pad_index = np.where(_y == -100)[0][0]\n",
    "        if pad_index == 0:\n",
    "            distance = 0.0\n",
    "        else:\n",
    "            _y = _y[:pad_index]\n",
    "            distance, _ = fastdtw(x[0], _y)\n",
    "        \n",
    "        similarity_scores[i] = distance\n",
    "        \n",
    "    return similarity_scores.reshape(1, -1)\n",
    "\n",
    "\n",
    "    \n",
    "db.add(\n",
    "    VectorIndex(\n",
    "        identifier='player_movements',\n",
    "        indexing_listener=flatten_listener,\n",
    "        compatible_listener=Listener(\n",
    "            model=player_movement_model,\n",
    "            key='player',\n",
    "            select=None,\n",
    "            active=False\n",
    "        ),\n",
    "        measure=measure\n",
    "    )\n",
    ")\n",
    "\n",
    "db.show('vector_index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1863eeb2-cbfc-4ca5-9743-1b0416de129e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from superduperdb import CFG\n",
    "CFG.force_set('cluster.vector_search', 'in_memory')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ee256da3-dd8d-482e-84e3-53d62a5aa8e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[32m 2024-Feb-26 17:13:13.70\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.datalayer\u001b[0m:\u001b[36m1030\u001b[0m | \u001b[1m{}\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:13:13.72\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.datalayer\u001b[0m:\u001b[36m153 \u001b[0m | \u001b[1mloading of vectors of vector-index: 'player_movements'\u001b[0m\n",
      "\u001b[32m 2024-Feb-26 17:13:13.72\u001b[0m| \u001b[1mINFO    \u001b[0m | \u001b[36mkartiks-MacBook-Air.local\u001b[0m| \u001b[36msuperduperdb.base.datalayer\u001b[0m:\u001b[36m169 \u001b[0m | \u001b[1m<superduperdb.backends.mongodb.query.MongoCompoundSelect[\n",
      "    \u001b[92m\u001b[1mrecordings.find({}, {'_outputs.Snapshots.flatten.0': '1', '_outputs.Snapshots.flatten/0': '1', '_id': '1'})\u001b[0m\n",
      "] object at 0x17b63bad0>\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading vectors into vector-table...: 287it [00:00, 21652.01it/s]\n"
     ]
    }
   ],
   "source": [
    "# Execute the search and get the next result\n",
    "r = next(db.execute(\n",
    "    Collection('recordings')\n",
    "    .like(Document({'player': 'Dominic'}), vector_index='player_movements', n=1)\n",
    "    .find()\n",
    "))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "071dad84-1e34-4dc0-8a31-381d84aa04d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "document = r.unpack()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e04bddb1-ada8-4433-8ba8-5975f14b728b",
   "metadata": {},
   "source": [
    "### You get whose Similar player like Dominic in terms of Movement.\n",
    "#### Also you get the speed, acceleration of the similar player so you can further analyze."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8407d7ab-21fa-42b6-b6c7-194942db2aba",
   "metadata": {},
   "source": [
    "#### Similar Player name and location: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7d6f7b43-f496-40c4-9728-ac959f07d793",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Nickname': 'SigMeister', 'location': 'US-CA'}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "document['Player']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a52212e9-10bc-47aa-b749-3a647d49431d",
   "metadata": {},
   "source": [
    "### Speed and Acceleration of the Player"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c91dbed-8a3f-432d-acc3-83ab25b74ea1",
   "metadata": {},
   "source": [
    "### Speed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f5bf7b37-542a-4cc4-8c2f-9a82f9b0d7df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.99837520e-03,\n",
       "       1.14878688e-01, 2.64967836e-01, 4.14964557e-01, 4.99995708e-01,\n",
       "       4.99999523e-01, 2.56787845e-01, 1.93296215e-01, 4.21217166e-01,\n",
       "       4.99865300e-01, 4.99999523e-01, 4.99999523e-01, 4.99999523e-01,\n",
       "       4.99999523e-01, 4.99999523e-01, 3.49324468e-01, 4.89642911e-01,\n",
       "       4.99999527e-01, 4.99999523e-01, 4.99999523e-01, 5.00000477e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00000954e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 3.97742378e-01,\n",
       "       4.71397199e-01, 5.60941289e-01, 6.30968956e-01, 5.80674712e-01,\n",
       "       5.21262587e-01, 5.00202715e-01, 4.99897003e-01, 4.83083716e-01,\n",
       "       4.99949371e-01, 5.00001907e-01, 5.08699230e-01, 5.55118771e-01,\n",
       "       5.84535850e-01, 7.03593546e-01, 6.38713328e-01, 5.57739415e-01,\n",
       "       5.09306616e-01, 4.99852605e-01, 4.45596304e-01, 2.88862373e-01,\n",
       "       4.75016000e-01, 5.00643828e-01, 4.99820710e-01, 4.99931417e-01,\n",
       "       5.16070440e-01, 4.03220138e-01, 4.28416891e-01, 5.65490729e-01,\n",
       "       6.40941150e-01, 5.58230159e-01, 5.09917904e-01, 4.99744695e-01,\n",
       "       4.99744456e-01, 4.99744456e-01, 4.99744456e-01, 4.99744456e-01,\n",
       "       4.99744456e-01, 4.99744456e-01, 4.99744456e-01, 4.99744456e-01,\n",
       "       4.99744456e-01, 4.99744456e-01, 4.99744456e-01, 4.99744456e-01,\n",
       "       4.99744456e-01, 4.99744456e-01, 3.26937866e-01, 1.14523695e-01,\n",
       "       3.38410236e-01, 6.26499551e-01, 5.72847478e-01, 5.17137799e-01,\n",
       "       4.99975077e-01, 4.99839792e-01, 4.99839792e-01, 4.99839792e-01,\n",
       "       4.99839792e-01, 4.99839792e-01, 4.99839792e-01, 4.99839792e-01,\n",
       "       1.44715529e-01, 7.25184510e-05, 2.38418579e-06, 4.50450623e-02,\n",
       "       1.90031455e-01, 3.39864883e-01, 4.75014551e-01, 5.00001917e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       4.42363462e-02, 2.89195380e-03, 2.25521292e-04, 1.52885623e-05,\n",
       "       1.90734863e-06, 0.00000000e+00, 1.90734863e-06, 9.53674316e-07,\n",
       "       2.86102295e-06, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
       "       0.00000000e+00, 0.00000000e+00, 9.06951956e-03, 1.09839129e-01,\n",
       "       2.76876408e-01, 4.28343600e-01, 4.61165944e-01, 4.15450287e-01,\n",
       "       4.69545022e-01, 5.00091036e-01, 4.70441895e-01, 4.00864859e-01,\n",
       "       4.29766538e-01, 4.99286907e-01, 4.35646057e-01, 3.61142927e-02,\n",
       "       1.78189327e-01, 3.28638188e-01, 4.68355029e-01, 5.00001951e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.04179068e-01, 5.44818895e-01, 4.70182540e-01,\n",
       "       6.41207942e-01, 5.63375883e-01, 5.00901236e-01, 5.26225882e-01,\n",
       "       5.91999196e-01, 6.64224859e-01, 6.01944993e-01, 5.14055934e-01,\n",
       "       5.15387215e-01, 5.72509065e-01, 6.23454587e-01, 5.22898473e-01,\n",
       "       5.16314258e-01, 5.72334115e-01, 5.91774267e-01, 5.11040760e-01,\n",
       "       5.18786114e-01, 5.78542753e-01, 6.30135410e-01, 5.61683191e-01,\n",
       "       5.09466476e-01, 5.07919973e-01, 5.46883969e-01, 5.52082594e-01,\n",
       "       5.06812756e-01, 4.99968764e-01, 5.16226180e-01, 5.72053012e-01,\n",
       "       6.02956797e-01, 5.00002810e-01, 5.00048785e-01, 5.00041904e-01,\n",
       "       4.99992427e-01, 5.03279414e-01, 5.39809998e-01, 5.90898670e-01,\n",
       "       5.36915310e-01, 5.02517335e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.67921258e-01, 4.99955254e-01, 5.05900028e-01, 5.50259188e-01,\n",
       "       6.27039149e-01, 5.74807741e-01, 5.03416608e-01, 5.35232747e-01,\n",
       "       6.00774308e-01, 5.04716431e-01, 3.68307211e-01, 4.99083432e-01,\n",
       "       5.05585619e-01, 5.31675882e-01, 5.99179963e-01, 2.53551384e-01,\n",
       "       3.98303949e-01, 1.78636522e-02, 3.04374697e-02, 9.05952454e-02,\n",
       "       2.39698445e-01, 3.91925240e-01, 4.36405536e-01, 1.10060462e-02,\n",
       "       2.05423672e-02, 9.39808797e-02, 2.39959717e-01, 3.91994476e-01,\n",
       "       4.12989546e-01, 1.19207794e-02, 1.53485102e-02, 5.90452541e-03,\n",
       "       5.24521013e-03, 5.24520874e-03, 7.46917822e-03, 1.10359192e-02,\n",
       "       9.15107727e-02, 2.41214752e-01, 3.89545874e-01, 3.72572002e-01,\n",
       "       3.27716024e-01, 4.10259832e-01, 4.99588729e-01, 4.41670881e-01,\n",
       "       3.88911074e-01, 5.26009182e-01, 4.64973690e-01, 1.50053424e-01,\n",
       "       1.90944099e-01, 3.43744251e-01, 4.75763308e-01, 5.00009156e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.82742293e-01, 5.08779680e-01, 4.99955830e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       3.24383376e-01, 3.56211287e-01, 5.10395144e-01, 6.01640781e-01,\n",
       "       5.23425874e-01, 5.07078011e-01, 5.00125885e-01, 5.00125885e-01,\n",
       "       5.00125885e-01, 5.00125885e-01, 5.00125885e-01, 5.00229706e-01,\n",
       "       5.16095167e-01, 5.15805648e-01, 5.00069381e-01, 5.00019442e-01,\n",
       "       5.00059942e-01, 5.02864515e-01, 5.34726084e-01, 6.04673918e-01,\n",
       "       6.01824784e-01, 5.00226152e-01, 5.30502556e-01, 5.98665311e-01,\n",
       "       6.55880380e-01, 5.00215981e-01, 5.00054442e-01, 5.00067828e-01,\n",
       "       5.00056068e-01, 5.00013773e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       4.84010369e-01, 4.96332016e-01, 5.08200136e-01, 5.00794898e-01,\n",
       "       5.27576472e-01, 5.91375043e-01, 6.79822734e-01, 7.07109480e-01,\n",
       "       6.45901773e-01, 5.24136134e-01, 5.18963317e-01, 5.77714958e-01,\n",
       "       6.65524852e-01, 7.07052159e-01, 7.07052159e-01, 5.37167870e-01,\n",
       "       5.00028915e-01, 5.00068259e-01, 5.00063146e-01, 5.00037730e-01,\n",
       "       5.00001912e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.04129720e-01, 5.45215110e-01, 6.13957405e-01, 5.74400195e-01,\n",
       "       5.17161248e-01, 5.02975968e-01, 5.40124861e-01, 6.11536493e-01,\n",
       "       6.72669308e-01, 5.00293819e-01, 5.00025887e-01, 5.00062870e-01,\n",
       "       5.00059637e-01, 5.00035391e-01, 4.99999527e-01, 4.99999642e-01,\n",
       "       4.86546814e-01, 4.94976163e-01, 5.14170642e-01, 4.99792366e-01,\n",
       "       5.13691431e-01, 5.67416273e-01, 6.51798577e-01, 6.83020458e-01,\n",
       "       5.93834398e-01, 5.28935327e-01, 5.04101074e-01, 5.45694444e-01,\n",
       "       6.20477613e-01, 6.98278835e-01, 7.07052160e-01, 5.23358078e-01,\n",
       "       5.00006353e-01, 5.00061185e-01, 5.00062269e-01, 5.00057844e-01,\n",
       "       5.00006125e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.08040039e-01,\n",
       "       3.55999575e-01, 4.91171540e-01, 4.99837892e-01, 5.44884145e-01,\n",
       "       6.33866906e-01, 5.17838786e-01, 5.00009540e-01, 5.00031760e-01,\n",
       "       5.00063871e-01, 5.00062078e-01, 5.00030428e-01, 5.00001909e-01,\n",
       "       5.00001907e-01, 4.83631676e-01, 5.00152203e-01, 5.13659631e-01,\n",
       "       4.99902914e-01, 4.99963760e-01, 4.99963760e-01, 4.99963760e-01,\n",
       "       4.99963760e-01, 4.56761241e-01, 2.69859692e-01, 4.74445661e-01,\n",
       "       5.97024064e-01, 5.04333228e-01, 5.00001908e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00165481e-01, 5.18200306e-01,\n",
       "       5.46096456e-01, 4.69000296e-01, 4.09779463e-01, 4.99621649e-01,\n",
       "       6.07308691e-01, 6.49622059e-01, 5.00139944e-01, 5.00012451e-01,\n",
       "       5.00060214e-01, 5.00048442e-01, 5.00049360e-01, 4.99995265e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.82337091e-01, 5.00015878e-01,\n",
       "       5.10551617e-01, 4.99992382e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.27818060e-01, 2.77512780e-01,\n",
       "       4.86046448e-01, 6.34997819e-01, 5.00290793e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       1.59664154e-01, 7.29273746e-03, 1.22217264e-01, 2.71622579e-01,\n",
       "       4.22083525e-01, 4.99995011e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 4.99992371e-01, 4.99992371e-01, 4.99992371e-01,\n",
       "       4.99992371e-01, 5.00000000e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00000000e-01, 4.99999523e-01, 4.99999523e-01,\n",
       "       4.99999523e-01, 4.99999523e-01, 4.99999523e-01, 4.99999523e-01,\n",
       "       4.99999523e-01, 4.99999523e-01, 4.99999523e-01, 4.99999523e-01,\n",
       "       4.99999523e-01, 5.00000000e-01, 5.00000119e-01, 5.00000119e-01,\n",
       "       5.00000000e-01, 4.99999970e-01, 5.00000030e-01, 5.00000119e-01,\n",
       "       5.00000119e-01, 4.99999762e-01, 4.99999523e-01, 4.99999523e-01,\n",
       "       4.99999523e-01, 4.99999762e-01, 4.99999523e-01, 4.99999523e-01,\n",
       "       4.99999523e-01, 4.99999523e-01, 4.99999523e-01, 4.99999523e-01,\n",
       "       4.99999523e-01, 5.00001431e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00001907e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01, 5.00000954e-01, 5.00001907e-01, 5.00001907e-01,\n",
       "       5.00001907e-01])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "document['_outputs']['Snapshots']['speed']['0']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "347d2ac5-39ba-493e-8912-b1f17d3ab922",
   "metadata": {},
   "source": [
    "### Acceleration "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "126cdadb-e41d-4a7c-8621-c4961ae5ebd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  4.99837520e-03,  1.09880312e-01,\n",
       "        1.50089149e-01,  1.49996720e-01,  8.50311518e-02,  3.81469727e-06,\n",
       "       -2.43211678e-01, -6.34916307e-02,  2.27920951e-01,  7.86481345e-02,\n",
       "        1.34222927e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00, -1.50675055e-01,  1.40318443e-01,  1.03566160e-02,\n",
       "       -4.20357504e-09,  0.00000000e+00,  9.53674316e-07,  1.43051147e-06,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00, -9.53674316e-07,  9.53674316e-07,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00, -1.02259529e-01,  7.36548209e-02,\n",
       "        8.95440900e-02,  7.00276666e-02, -5.02942435e-02, -5.94121254e-02,\n",
       "       -2.10598713e-02, -3.05711884e-04, -1.68132874e-02,  1.68656552e-02,\n",
       "        5.25361123e-05,  8.69732235e-03,  4.64195415e-02,  2.94170791e-02,\n",
       "        1.19057696e-01, -6.48802179e-02, -8.09739132e-02, -4.84327984e-02,\n",
       "       -9.45401096e-03, -5.42563015e-02, -1.56733931e-01,  1.86153627e-01,\n",
       "        2.56278280e-02, -8.23117977e-04,  1.10706368e-04,  1.61390228e-02,\n",
       "       -1.12850302e-01,  2.51967537e-02,  1.37073838e-01,  7.54504209e-02,\n",
       "       -8.27109910e-02, -4.83122549e-02, -1.01732089e-02, -2.38695130e-07,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00, -1.72806591e-01, -2.12414171e-01,  2.23886542e-01,\n",
       "        2.88089315e-01, -5.36520730e-02, -5.57096790e-02, -1.71627218e-02,\n",
       "       -1.35285298e-04,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.55124263e-01,\n",
       "       -1.44643010e-01, -7.01342652e-05,  4.50426781e-02,  1.44986393e-01,\n",
       "        1.49833428e-01,  1.35149667e-01,  2.49873665e-02, -9.83705706e-09,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -4.55765561e-01,\n",
       "       -4.13443924e-02, -2.66643251e-03, -2.10232730e-04, -1.33812137e-05,\n",
       "       -1.90734863e-06,  1.90734863e-06, -9.53674316e-07,  1.90734863e-06,\n",
       "       -2.86102295e-06,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  9.06951956e-03,  1.00769610e-01,  1.67037279e-01,\n",
       "        1.51467191e-01,  3.28223445e-02, -4.57156569e-02,  5.40947354e-02,\n",
       "        3.05460138e-02, -2.96491416e-02, -6.95770360e-02,  2.89016793e-02,\n",
       "        6.95203688e-02, -6.36408494e-02, -3.99531765e-01,  1.42075034e-01,\n",
       "        1.50448861e-01,  1.39716841e-01,  3.16469226e-02, -4.40193737e-08,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  1.45519152e-11, -1.45519152e-11,\n",
       "        4.17716110e-03,  4.06398270e-02, -7.46363557e-02,  1.71025402e-01,\n",
       "       -7.78320595e-02, -6.24746463e-02,  2.53246458e-02,  6.57733141e-02,\n",
       "        7.22256627e-02, -6.22798658e-02, -8.78890587e-02,  1.33128029e-03,\n",
       "        5.71218507e-02,  5.09455216e-02, -1.00556114e-01, -6.58421467e-03,\n",
       "        5.60198571e-02,  1.94401516e-02, -8.07335066e-02,  7.74535384e-03,\n",
       "        5.97566386e-02,  5.15926571e-02, -6.84522191e-02, -5.22167145e-02,\n",
       "       -1.54650326e-03,  3.89639963e-02,  5.19862457e-03, -4.52698381e-02,\n",
       "       -6.84399174e-03,  1.62574160e-02,  5.58268318e-02,  3.09037850e-02,\n",
       "       -1.02953987e-01,  4.59751607e-05, -6.88150050e-06, -4.94774471e-05,\n",
       "        3.28698703e-03,  3.65305843e-02,  5.10886724e-02, -5.39833603e-02,\n",
       "       -3.43979746e-02, -2.52496468e-03,  0.00000000e+00, -3.20711122e-02,\n",
       "        3.20339958e-02,  5.94477379e-03,  4.43591601e-02,  7.67799611e-02,\n",
       "       -5.22314083e-02, -7.13911331e-02,  3.18161393e-02,  6.55415609e-02,\n",
       "       -9.60578769e-02, -1.36409220e-01,  1.30776221e-01,  6.50218637e-03,\n",
       "        2.60902632e-02,  6.75040807e-02, -3.45628579e-01,  1.44752565e-01,\n",
       "       -3.80440296e-01,  1.25738175e-02,  6.01577756e-02,  1.49103200e-01,\n",
       "        1.52226795e-01,  4.44802959e-02, -4.25399490e-01,  9.53632102e-03,\n",
       "        7.34385125e-02,  1.45978837e-01,  1.52034760e-01,  2.09950698e-02,\n",
       "       -4.01068767e-01,  3.42773076e-03, -9.44398477e-03, -6.59315281e-04,\n",
       "       -1.38716246e-09,  2.22396948e-03,  3.56674097e-03,  8.04748535e-02,\n",
       "        1.49703979e-01,  1.48331122e-01, -1.69738720e-02, -4.48559776e-02,\n",
       "        8.25438082e-02,  8.93288966e-02, -5.79178477e-02, -5.27598075e-02,\n",
       "        1.37098109e-01, -6.10354921e-02, -3.14920267e-01,  4.08906749e-02,\n",
       "        1.52800153e-01,  1.32019056e-01,  2.42458484e-02, -1.67852593e-05,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.72500773e-02,\n",
       "        2.60373872e-02, -8.82385018e-03,  3.65403113e-05, -1.45521373e-11,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -1.75608994e-01,\n",
       "        3.18279108e-02,  1.54183856e-01,  9.12456370e-02, -7.82149061e-02,\n",
       "       -1.63478634e-02, -6.95212599e-03,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  1.03821483e-04,  1.58654606e-02,\n",
       "       -2.89518847e-04, -1.57362673e-02, -4.99390616e-05,  4.05003202e-05,\n",
       "        2.80457255e-03,  3.18615689e-02,  6.99478342e-02, -2.84913389e-03,\n",
       "       -1.01598632e-01,  3.02764042e-02,  6.81627554e-02,  5.72150685e-02,\n",
       "       -1.55664398e-01, -1.61539884e-04,  1.33867946e-05, -1.17605359e-05,\n",
       "       -4.22949344e-05, -1.18655620e-05, -1.45519152e-11, -1.59915380e-02,\n",
       "        1.23216462e-02,  1.18681205e-02, -7.40523771e-03,  2.67815733e-02,\n",
       "        6.37985718e-02,  8.84476910e-02,  2.72867453e-02, -6.12077071e-02,\n",
       "       -1.21765639e-01, -5.17281649e-03,  5.87516406e-02,  8.78098941e-02,\n",
       "        4.15273071e-02,  0.00000000e+00, -1.69884289e-01, -3.71389552e-02,\n",
       "        3.93439581e-05, -5.11231735e-06, -2.54158849e-05, -3.58183568e-05,\n",
       "       -4.71480255e-09,  0.00000000e+00,  0.00000000e+00,  4.12781296e-03,\n",
       "        4.10853899e-02,  6.87422944e-02, -3.95572093e-02, -5.72389472e-02,\n",
       "       -1.41852803e-02,  3.71488935e-02,  7.14116311e-02,  6.11328153e-02,\n",
       "       -1.72375489e-01, -2.67932196e-04,  3.69832336e-05, -3.23295975e-06,\n",
       "       -2.42455050e-05, -3.58645766e-05,  1.15483996e-07, -1.34528281e-02,\n",
       "        8.42934834e-03,  1.91944791e-02, -1.43782754e-02,  1.38990648e-02,\n",
       "        5.37248423e-02,  8.43823034e-02,  3.12218813e-02, -8.91860600e-02,\n",
       "       -6.48990716e-02, -2.48342523e-02,  4.15933697e-02,  7.47831694e-02,\n",
       "        7.78012217e-02,  8.77332519e-03, -1.83694082e-01, -2.33517251e-02,\n",
       "        5.48316514e-05,  1.08402933e-06, -4.42456773e-06, -5.17191023e-05,\n",
       "       -4.21790992e-06, -1.45519152e-11,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  8.03813206e-03, -1.52040464e-01,\n",
       "        1.35171965e-01,  8.66635211e-03,  4.50462524e-02,  8.89827610e-02,\n",
       "       -1.16028119e-01, -1.78292459e-02,  2.22193085e-05,  3.21110189e-05,\n",
       "       -1.79265385e-06, -3.16499616e-05, -2.85190708e-05, -1.76077497e-09,\n",
       "       -1.63702315e-02,  1.65205267e-02,  1.35074281e-02, -1.37567163e-02,\n",
       "        6.08460173e-05,  0.00000000e+00, -1.45529699e-11,  0.00000000e+00,\n",
       "       -4.32025197e-02, -1.86901549e-01,  2.04585969e-01,  1.22578403e-01,\n",
       "       -9.26908359e-02, -4.33132057e-03, -5.23866950e-10,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  1.63574113e-04,  1.80348248e-02,  2.78961493e-02,\n",
       "       -7.70961596e-02, -5.92208331e-02,  8.98421863e-02,  1.07687042e-01,\n",
       "        4.23133678e-02, -1.49482115e-01, -1.27492979e-04,  4.77629437e-05,\n",
       "       -1.17713368e-05,  9.17728641e-07, -5.40946947e-05, -2.89463001e-06,\n",
       "       -1.45521373e-11, -1.76552793e-02,  1.76787869e-02,  1.05357387e-02,\n",
       "       -1.05592349e-02, -1.13943234e-08, -1.45521373e-11,  0.00000000e+00,\n",
       "        0.00000000e+00, -7.21743101e-02, -1.50305280e-01,  2.08533668e-01,\n",
       "        1.48951371e-01, -1.34707027e-01, -2.98422151e-04, -5.82085491e-11,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00, -3.40328217e-01,\n",
       "       -1.52371417e-01,  1.14924527e-01,  1.49405315e-01,  1.50460946e-01,\n",
       "        7.79114863e-02, -2.64084214e-06, -1.45521373e-11,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        1.45521373e-11, -1.45521373e-11,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        7.62939453e-06,  1.90734863e-06,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "       -1.90734863e-06, -4.76837158e-07,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  1.45519152e-11, -1.45519152e-11,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        4.76837158e-07,  1.19209290e-07,  0.00000000e+00, -1.19209290e-07,\n",
       "       -2.98023224e-08,  5.96046448e-08,  8.94069672e-08,  0.00000000e+00,\n",
       "       -3.57627869e-07, -2.38418579e-07,  0.00000000e+00,  0.00000000e+00,\n",
       "        2.38418579e-07, -2.38418579e-07,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        1.90734863e-06,  4.76837158e-07,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "        0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n",
       "       -9.53674316e-07,  9.53674316e-07,  0.00000000e+00,  0.00000000e+00])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "document['_outputs']['Snapshots']['acceleration']['0']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c138745",
   "metadata": {},
   "source": [
    "# Notes:\n",
    "The code above will have an error because we have only read permission to the MongoDB Database.\n",
    "\n",
    "However, this is the pseuocde of what we happens next after adding the listener\n",
    "  - Flatten movements is added to the database as model which converts the x,y,z coordinates to a array like structure.\n",
    "  - We will create a VectorIndex with embedding_listener as above listener.\n",
    "  - Once created it will index all the documents i.e player and transfer the outputs into an array like structure.\n",
    "  - Once embeddings are created we can now do vector search with cosine similarity function to find similar player movements\n",
    "  - Moreover we will also calculate for each movement - acceleration, speed and angle at each point of snapshot"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
